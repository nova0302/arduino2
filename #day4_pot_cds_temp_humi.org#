#+options: toc:nil ^:nil tags:t f:t
#+author: Sanglae Kim
#+title: 04. 가변저항, CdS, 온도 및 습도센서, 서보모터 제어 
#+subtitle: 가변저항, CDS, 온도 및 습도센서, 서보모터 제어
#+setupfile:~/org-html-themes/setup/theme-bigblow.setup
#+HTML_HEAD_EXTRA: <style>pre {font-size:18px; font-family: 'consolas';}</style>
* 학습목표
  - 디지탈 및 아날로그 I/O의 사용 방법을 익힌다.
  - 아날로그 I/O를 사용하여 가변저항과 CDS의 값을 측정 할 수 있다.
  - HT-01SV 센서 라이브러리를 사용하여 온도 및 습도를 측정 할 수 있다. 
  - 서보모터의 동작을 이해하고 아날로그 I/O를 사용하여 이를 제어 할 수 있다.

* 디지털 및 아날로그 I/O
  - 디지털 신호 : 0 과 1(0V, 5V)
  - 아날로그 신호 : 실수의 값을 가지는 신호(0~5V)
#+CAPTION: Mega 2560
#+ATTR_HTML: :width 800 :hight 600
   [[./images/arduino_mega2560_adk.jpg]]

#+CAPTION: key pad & dip sw shield
#+ATTR_HTML: :width 800 :hight 600
   [[./images/keypad_shield_good.jpg]]
** 실   습
*** 디지탈 I/O 예제 1
#+BEGIN_SRC c++ -n
  const ledPin = 13;
  const dipSW = 14;
  setup(){
    pinMode(ledPin, OUTPUT);
    pinMode(dipSW, INPUT);
  }
  void loop(){
    digitalWrite(ledPin, digitalRead(dipSW));
  }
#+END_SRC

*** 디지탈 I/O 예제 2
#+BEGIN_SRC c++ -n
  const ledPin = 13;
  const dipSW = 14;
  setup(){
    pinMode(ledPin, OUTPUT);
    pinMode(dipSW, INPUT);
  }
  void loop(){
    while(digitalRead(dipSW)){
      //딥스위치가 1이 될 때까지 대기
    }
    digitalWrite(ledPin, LOW);
    delay(500);
    digitalWrite(ledPin, HIGH);
    delay(500);
  }
#+END_SRC

*** 아날로그 I/O
    
**** PWM
     - 모터, 조명장치 제어에 사용됨
#+ATTR_HTML: :width 800 :hight 600
   [[./images/pulseWidthModulation.jpg]]
**** ADC
     - 아날로그 신호를 마이크로 프로세서가 처리 할 수 있는, 디지털 신호로 변환
#+ATTR_HTML: :width 800 :hight 600
   [[./images/adc1.jpg]]
#+ATTR_HTML: :width 800 :hight 600
   [[./images/adc.jpg]]
#+CAPTION: 가변 저항, CDS 및 온습도 센서
#+ATTR_HTML: :width 800 :hight 600
   [[./images/variable_resistor_shield.jpg]]

#+BEGIN_SRC c++ -n
  /*
  +-------+-----+-----+-----+-----+-----+-----+-----+-----+
  |J1     |1    |2    |3    |4    |5    |6    |7    |8    |
  +-------+-----+-----+-----+-----+-----+-----+-----+-----+
  |       | CDS |VR   |     |     |SCK  |SDA  |     |     |
  +-------+-----+-----+-----+-----+-----+-----+-----+-----+
  |Arduino|     | A0  |     |     |     |     |     |     |
  +-------+-----+-----+-----+-----+-----+-----+-----+-----+
*/
    const char ledPin = 13;
    setup(){
      // 아날로그 포트는 명시적으로 입력 또는 출력을
      // 설정해 줄 필요없다.
    }
    void loop(){
      analogWrite(ledPin, map(0, 1023, 0, 255, analogRead(A0)));
    }
#+END_SRC

* 가변저항 및 CdS 측정
  https://www.youtube.com/watch?v=_6QIutZfsFs
** 가변저항 CdS, 온습도 센서 쉴드 
#+ATTR_HTML: :width 800 :hight 600
   [[./images/variable_resistor_shield.jpg]]
** 가변저항
   - 3개의 단자로 구성되어 있으며 볼륨을 돌리는 방향에 따라 중간 단자와 양측
   - 두 단자 간의 저항 값이 변하는 소자이다.
** CdS(Cadmium-sulfide photo resistor)
   - CdS 센서는 빛의 밝기에 따라 저항값이 달라지는 소자다.
   - 빛이 밝아지면 저항값이 작아지고
   - 어두워지면 저항값은 커지는 특성을 가진다.
** 가변저항과 아날로그 포트 연결
#+ATTR_HTML: :width 800 :hight 600
   [[./images/adc_theory.jpg]]
** 가변저항 및 CdS 예제
#+BEGIN_SRC C -n
  /*
    +-------+-----+-----+-----+-----+-----+-----+-----+-----+
    |J1     |1/CdS|2/VR |3    |4    |5/SCK|6/SDA|7    |8    |
    +-------+-----+-----+-----+-----+-----+-----+-----+-----+
    |Arduino|     |A0   |     |     |     |     |     |     |
    +-------+-----+-----+-----+-----+-----+-----+-----+-----+
  ,*/
  void setup (){
    Serial.begin (9600);
  }
  void loop (){
    int vrValue = analogRead(A0);
    Serial.println(vrValue);
    analogWrite (13, map ( vrValue, 0, 1023, 0, 255));
    delay (100);
  }
#+END_SRC

* 온도 및 습도 센서 제어(HT-01SV )
** HT-01SV
#+ATTR_HTML: :width 800 :hight 600
   [[./images/ht_01sv.jpg]]
    
** 온도 및 습도 센서 예제 
 http://www.circuitbasics.com/basics-of-the-i2c-communication-protocol/  
*** 1. 온도 및 습도 시리얼 츨력 
#+BEGIN_SRC C -n
  /*
    +--------+-----+-----+-----+-----+-----+-----+-----+-----+
    |J1      |1/CDS|2/VR |3    |4    |5/SCK|6/SDA|7    |8    |
    +--------+-----+-----+-----+-----+-----+-----+-----+-----+
    | Arduino|     |     |     |     |21   |20   |     |     |
    +--------+-----+-----+-----+-----+-----+-----+-----+-----+
  */
  #include <SHT1x.h>  // 온습도 센서 라이브러리 다운로드 주소 https://github.com/practicalarduino/SHT1x //

  const int dataPin = 20;          // 데이터핀
  const int clockPin = 21;         // 클럭핀

  SHT1x sht1x(dataPin, clockPin);  // 온습도 센서를 활용을 위해 객체를 선언

  void setup() {
    Serial.begin(9600);  // 시리얼 통신 속도를 9600으로 설정한다.
  }

  void loop() {
    int temperatureValue = (int)sht1x.readTemperatureC() ; // 온도 값을 읽어 저장한다.
    int humidityValue =  (int)sht1x.readHumidity();    // 습도 값을 읽어 저장한다.

    // 온도 값을 출력한다.
    Serial.print("Temperature Value : ");  // 시리얼 모니터에 "Temperature Value"를 출력한다.
    Serial.print(temperatureValue);        // 센서 값을 시리얼 모니터로 출력한다.
    Serial.print("'C");

    // 습도 값을 출력한다.
    Serial.print("\t Humidity Value : "); // 시리얼 모니터에 "Humidity Value"를 출력한다.
    Serial.print(humidityValue);          // 센서 값을 시리얼 모니터로 출력한다.  
    Serial.println("%");  

    // 약 100ms (1/100초)의 지연시간을 주어 100ms마다 동작을 반복하게 한다.  
    delay(100);          
  }
#+END_SRC
**** SHT1x 라이브러리 설치
#+ATTR_HTML: :width 800 :hight 600
   [[./images/sht1xLibrary1.jpg]]

#+ATTR_HTML: :width 800 :hight 600
   [[./images/sht1xLibrary2.jpg]]

#+ATTR_HTML: :width 800 :hight 600
   [[./images/sht1xLibrary3.jpg]]

#+ATTR_HTML: :width 800 :hight 600
   [[./images/sht1xLibrary4.jpg]]

#+ATTR_HTML: :width 800 :hight 600
   [[./images/sht1xLibrary5.jpg]]

#+ATTR_HTML: :width 800 :hight 600
   [[./images/sht1xLibrary6.jpg]]
*** 2. 응용예제
#+BEGIN_SRC c -n
+-----------+-----+-----+-----+-----+-----+-----+-----+-----+
|led shield |1    |2    |3    |4    |5    |6    |7    |8    |
+-----------+-----+-----+-----+-----+-----+-----+-----+-----+
|arduino    |22   |23   |24   |25   |26   |27   |28   |29   |
+-----------+-----+-----+-----+-----+-----+-----+-----+-----+
|led shield |9    |10   |11   |12   |13   |14   |15   |16   |
+-----------+-----+-----+-----+-----+-----+-----+-----+-----+
|arduino    |37   |36   |35   |34   |33   |32   |31   |30   |
+-----------+-----+-----+-----+-----+-----+-----+-----+-----+
  /*********************************************************
		     [온,습도 값 출력 ]
	   온도, 습도 센서값을 LED 미터기로 출력한다.
  **********************************************************/
  #include <SHT1x.h>  // 온습도 센서 라이브러리 다운로드 주소 https://github.com/practicalarduino/SHT1x //

  const int dataPin = 20;          // 데이터핀
  const int clockPin = 21;         // 클럭핀

  SHT1x sht1x(dataPin, clockPin);  // 온습도 센서를 활용을 위해 객체를 선언

  byte meterGage = 0;        // 미터기의 값을 저장하는 변수

  //                            1   2   3   4   5   6   7   8                  
  const int LED_RED_PIN [8] = {22, 23, 24, 25, 26, 27, 28, 29};
  //                            9   10  11  12  13  14  15  16     
  const int LED_BLUE_PIN[8] = {37, 36, 35, 34, 33, 32, 31, 30};

  /*************************************************************
   * 함수명 : void setup() 
   * 설  명 : 초기화를 위한 setup 함수, 1번만 실행 된다.
   *************************************************************/
  void setup() {
    // for문을 활용하여 LED 1~16까지를 출력으로 설정한다.
    for(int i = 0; i < 8; i++) {
      pinMode( LED_RED_PIN[i], OUTPUT);     // RED LED 초기화  
      pinMode(LED_BLUE_PIN[i], OUTPUT);     // BLUE LED 초기화         
      digitalWrite(LED_RED_PIN[i], HIGH);  // RED LED를 모두 끈다.
      digitalWrite(LED_BLUE_PIN[i], HIGH);  // BLUE LED를 모두 끈다.
    }  
  }

  /*************************************************************
   * 함수명 : void loop() 
   * 설  명 : 실질적인 코드가 구동 되는 함수로 무한 반복 됨
   *************************************************************/
  void loop() {
    int temperatureValue = (int)sht1x.readTemperatureC() ; // 온도 값을 읽어 저장한다.
    int humidityValue =  (int)sht1x.readHumidity();    // 습도 값을 읽어 저장한다.
  
    // 온도 센서에 대한 출력 설정
    for(int i = 0; i < 8; i++) {
      digitalWrite(LED_RED_PIN[i], HIGH);  // RED LED를 모두 끈다.
    
      // 현재 온도 값에 따라 LED 출력을 결정한다.
      // 현재 이 코드에서는 온도 최대치를 60으로 잡았고,
      // LED의 개수인 8로 나눈 값인 7로 LED의 표시 범위를 나누었다.(0~7, 8~14 .. )
      if( ( temperatureValue >= 7 * (i-1) ) && ( temperatureValue >= 7 * i ) )
	meterGage = i;    // 미터기의 값을 저장
    }
    // 온도 값에 의해 정해진 meterGage 값에 따라 LED를 점등한다.
    for(int i = 0; i < meterGage + 1; i++)
      digitalWrite(LED_RED_PIN[i], LOW);  

    // 습도 센서에 대한 출력 설정
    for(int i = 0; i < 8; i++) {
      digitalWrite(LED_BLUE_PIN[i], HIGH);  // BLUE LED를 모두 끈다.
    
      // 현재 습도 값에 따라 LED 출력을 결정한다.
      // 현재 이 코드에서는 습도 최대치를 100으로 잡았고,
      // LED의 수(8개) 만큼 나눈 값인 12로 LED의 출력 범위를 나누었다.(0~12, 12~24 .. )
      if( ( humidityValue >= 12 * (i-1) ) && ( humidityValue >= 12 * i ) )
	meterGage = i;    // 미터기의 값을 저장
    }
    // 습도 값에 의해 정해진 meterGage 값에 따라 LED를 점등한다. 
    for(int i = 0; i < meterGage + 1; i++)
      digitalWrite(LED_BLUE_PIN[i], LOW); 
  }

#+END_SRC

* 서보모터(Servo Motor )제어
    
**** 서보모터 연결
#+ATTR_HTML: :width 800 :hight 600
   [[./images/servo_motor.jpg]]

**** PWM 및 서보모터 각도
#+ATTR_HTML: :width 800 :hight 600
   [[./images/servo_pwm_diagram1.jpg]]
**** 스텝퍼 & 서보모터
#+ATTR_HTML: :width 800 :hight 600
   [[./images/motor_shield.jpg]]
**** 모터 드라이버
#+ATTR_HTML: :width 815 :hight 478
   [[./images/motor.jpg]]

**** 서보 모터 예제 
#+BEGIN_SRC C -n
  /*
    1. Motor shield cable connection
    +-------+-------+-----+-----+-----+-----+-----+-----+-----+
    |J3     |1/SERVO|2    |3/EN |4    |5/IN1|6/IN2|7/IN3|8/IN4|
    +-------+-------+-----+-----+-----+-----+-----+-----+-----+
    |Arduino| 7     |     |     |     |     |     |     |     |
    +-------+-------+-----+-----+-----+-----+-----+-----+-----+

    2. VR/CdS/TempHumi shield cable connection
    +-------+-----+-----+-----+-----+-----+-----+-----+-----+
    |J1     |1/CDS|2/VR |3    |4    |5/SCK|6/SDA|7    |8    |
    +-------+-----+-----+-----+-----+-----+-----+-----+-----+
    |Arduino|     | A0  |     |     |     |     |     |     |
    +-------+-----+-----+-----+-----+-----+-----+-----+-----+
  */
  #include <Servo.h>
  Servo myServo;
  void setup (){
    myServo.attach (7);
    delay (1000);
  }
  void loop (){
    myServo.write ( map( analogRead(A0), 0, 1023, 0, 180));
    delay (100);
  }
#+END_SRC
