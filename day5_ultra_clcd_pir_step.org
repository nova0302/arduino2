* Ultrasonic Sensor
** 초음파 센서 모듈
 #+ATTR_HTML: :width 800 :hight 600
    [[./images/ultrasonic.jpg]]

**** 초음파 센서 동작 원리
#+ATTR_HTML: :width 800 :hight 600
   [[./images/ultrasonic_wave.jpg]]
**** 초음파 센서 거리 계산 
#+ATTR_HTML: :width 800 :hight 600
   [[./images/ultrasonic_theory.jpg]]

** 소 스 코 드
#+BEGIN_SRC C -n 
  /*************************************************************
                  [ Ultra Sonic 센서 실습 ]
    
         시리얼 모니터로 초음파 센서의 값을 확인한다.
  **************************************************************/

  /**************************************************************
   * 초음파 센서 관련 변수 선언
   **************************************************************/ 
  const int  sonicValue = 58;   // 초음파 센서 제어를 위한 값 설정
  const char triggerPin = 2;   // 트리거핀의 번호
  const char echoPin = 3;      // 에코핀의 번호

  int sensorValue = 0;          // 초음파 센서 값을 저장하는 전역 변수

  char buffer[16];                 // 초음파 센서 값을 문자열로 만들기 위한 배열 선언

  /*************************************************************
   * 함수명 : void setup() 
   * 설  명 : 초기화를 위한 setup 함수, 1번만 실행 된다.
   *************************************************************/
  void setup() {

    // 시리얼 통신을 위한 설정, baudrate 9600.
    Serial.begin(9600);
    
    // 트리거 핀은 출력, 에코 핀은 입력으로 설정한다.
    pinMode(triggerPin,OUTPUT);
    pinMode(echoPin,INPUT);
    
    digitalWrite(triggerPin,LOW);
  }

  /*************************************************************
   * 함수명 : void loop() 
   * 설  명 : 실질적인 코드가 구동 되는 함수로 무한 반복 됨
   *************************************************************/
  void loop() {
    sensorValue = getSonic();
    
    Serial.print("Ultra Sonic Value : ");  
    // 받아온 초음파 값을 sprintf로 자릿수를 맞춰 준다.
    sprintf(buffer, "[ %2dcm ]",sensorValue);  
    Serial.println(buffer);
  }
  /***************************************************************
        [ func_ultrasonic ]
      - 초음파 센서와 관련 된 함수 모음
  ****************************************************************/

  /*************************************************************
   * 함수명 : long getSonic() 
   * 반환형 : long
   * 반환값 : duration : 초음파 센서의 값을 반환 받는다.
   * 설  명 : 초음파 센서의 값을 받아온다. 
   *************************************************************/
  long getSonic() {
    long duration, distance;

    // 트리거에 10ms 간격으로 펄스를 준다.
    digitalWrite(triggerPin, HIGH);  
    delayMicroseconds(10);
    digitalWrite(triggerPin, LOW);
      
    // pulsein 함수는 HIGH가 리턴 될 때 까지의 시간을 반환함
    duration = pulseIn(echoPin, HIGH);

    // 왕복거리 이므로  2로 나눈다.
    distance = duration * 0.034 / 2;
      
    // 약 100ms (1/100초)의 지연시간을 주어 100ms마다 동작을 반복하게 한다.
    delay(100);      
      
    // 값이 70 이상을 넘을 시 70을 유지한다.
    if(distance > 500) distance = 500;
      
    return distance;
  }
#+END_SRC

** pulsein function
#+ATTR_HTML: :width 800 :hight 600
   [[./images/pulseIn.jpg]]


* 캐릭터 LCD
** CLCD Module
#+ATTR_HTML: :width 800 :hight 600
   [[./images/clcd_module.jpg]]

**** CLCD Connection
#+ATTR_HTML: :width 800 :hight 600
   [[./images/clcd_connection.jpg]]
**** CLCD Shield
#+ATTR_HTML: :width 800 :hight 600
   [[./images/clcd_shield_zoomin.jpg]]
**** Example 1    
#+BEGIN_SRC C -n
  #include <LiquidCrystal.h>  

  //                RS  EN  DB4 DB5 DB6 DB7 <-- 아두이노와 매칭 되는 LCD의 핀 명칭                  
  LiquidCrystal lcd(41, 39, 45, 44, 43, 42); // LCD의 핀을 설정해준다.

  void setup() {
    pinMode(40, OUTPUT);    //  LCD의 RW핀을 OUTPUT(출력)으로 설정한다.
    digitalWrite(40, LOW);  //  LCD의 RW핀을 LOW로 설정한다.

    lcd.clear();            // LCD 화면에 표시된 것을 모두 지운다
    lcd.begin(16, 2);       // 16x2 LCD . 초기화 한다. 
  }

  void loop() {
    lcd.setCursor(0,0);
    lcd.print("Hello Arduino Mega 2560 ADK!!!!");         // 원하는 메세지를 함수 안에 넣는다. 현재 A가 LCD에 출력 된다.
    delay (10000);
  }
#+END_SRC
     
**** Example Autoscroll    
#+BEGIN_SRC C -n
  #include <LiquidCrystal.h>  

  //                RS   EN  DB4  DB5  DB6  DB7 <-- 아두이노와 매칭 되는 LCD의 핀 명칭                  
  LiquidCrystal lcd(41, 39, 45, 44, 43, 42); // LCD의 핀을 설정해준다.

  void setup() {
    pinMode(40, OUTPUT);    //  LCD의 RW핀을 OUTPUT(출력)으로 설정한다.
    digitalWrite(40, LOW);  //  LCD의 RW핀을 LOW로 설정한다.

    lcd.clear();            // LCD 화면에 표시된 것을 모두 지운다
    lcd.begin(16, 2);       // 16x2 LCD . 초기화 한다. 
  }

  void loop() {
    // set the cursor to (0,0):
    lcd.setCursor(0, 0);
    // print from 0 to 9:
    for (int thisChar = 0; thisChar < 10; thisChar++) {
      lcd.print(thisChar);
      delay(500);
    }

    // set the cursor to (16,1):
    lcd.setCursor(16, 1);
    // set the display to automatically scroll:
    lcd.autoscroll();
    // print from 0 to 9:
    for (int thisChar = 0; thisChar < 10; thisChar++) {
      lcd.print(thisChar);
      delay(500);
    }
    // turn off automatic scrolling
    lcd.noAutoscroll();

    // clear screen for the next loop:
    lcd.clear();
  }
#+END_SRC

**** Example setcursor    
#+BEGIN_SRC C -n
  #include <LiquidCrystal.h>  

  //                RS  EN  DB4 DB5 DB6 DB7 <-- 아두이노와 매칭 되는 LCD의 핀 명칭                  
  LiquidCrystal lcd(41, 39, 45, 44, 43, 42); // LCD의 핀을 설정해준다.

  void setup() {
    pinMode(40, OUTPUT);    //  LCD의 RW핀을 OUTPUT(출력)으로 설정한다.
    digitalWrite(40, LOW);  //  LCD의 RW핀을 LOW로 설정한다.

    lcd.clear();            // LCD 화면에 표시된 것을 모두 지운다
    lcd.begin(16, 2);       // 16x2 LCD . 초기화 한다. 
  }

  void loop() {
    // loop from ASCII 'a' to ASCII 'z':
    for (int thisLetter = 'a'; thisLetter <= 'z'; thisLetter++) {
      // loop over the columns:
      for (int  thisRow = 0; thisRow < numRows; thisRow++) {
        // loop over the rows:
        for (int thisCol = 0; thisCol < numCols; thisCol++) {
          // set the cursor position:
          lcd.setCursor(thisCol, thisRow);
          // print the letter:
          lcd.write(thisLetter);
          delay(200);
        }
      }
    }
  }
#+END_SRC


* Stepper Motor
** 1 Phase
#+BEGIN_SRC C -n
/*********************************************************
                   [ 스탭모터 실습 ]
  
                  STEP MOTOR의 1상 제어
**********************************************************/
#define CW  1            // 정방향 값 정의
#define CCW 0            // 역방향 값 정의

const int _A_IN1 = 3;     // Motor Pin A' Input 1 (Orange)
const int  A_IN2 = 2;     // Motor Pin A  Input 2 (Brown)
const int  B_IN3 = 1;     // Motor Pin B  Input 3 (RED)
const int _B_IN4 = 0;     // Motor Pin B' Input 4 (YELLOW)

const int EnablePin = 5;  // 활성핀

// 핀에 인가 될 값에 대한 테이블. 
// 1상 여자, 2상 여자, 1,2상 여자 설정이 가능하다.
// 현재는 1상 여자 설정
const boolean  A_IN_table[4] = {1,0,0,0};
const boolean  B_IN_table[4] = {0,1,0,0};
const boolean _A_IN_table[4] = {0,0,1,0};
const boolean _B_IN_table[4] = {0,0,0,1};

void setup() {
  pinMode(EnablePin,OUTPUT);      // Enable 핀을 출력으로 설정한다
  digitalWrite(EnablePin, HIGH);  // Enable 핀에 HIGH 신호를 준다
  
  pinMode(_A_IN1, OUTPUT); // A 핀을 출력으로 설정
  pinMode(A_IN2, OUTPUT);  // A'핀을 출력으로 설정
  pinMode(_B_IN4, OUTPUT); // B'핀을 출력으로 설정
  pinMode(B_IN3, OUTPUT);  // B 핀을 출력으로 설정
}

void loop() {
  // 스테퍼 모터를 정방향으로 펄스를 준다. (한 바퀴에 200펄스)
  // 100스탭일시 180도만큼 동작한다. 
  stepMotor_move(100, CW, 2200);  // 속도 값은 최소 2200이상 (1상 여자)
  
  // 1000ms 동안 대기 한다.
  delay(1000);
}

/*************************************************************
 * 함수명 : void stepMotor_move(unsigned int MotorStep, 
                 char MotorDirection, unsigned int MotorSpeed)
 * 인자값 : unsigned int MotorStep  - 모터의 스탭 값
            char MotorDirection     - 모터의 동작 방향
            unsigned int MotorSpeed - 모터의 속도
 * 설  명 : 서보모터를 구동 시키는 함수. 1스탭 간격으로 동작한다.
 *************************************************************/
void stepMotor_move(unsigned int MotorStep, char MotorDirection, unsigned int MotorSpeed) {  
  if(MotorDirection) {
    for(int i = 0; i < MotorStep; i++) {
      // 제어를 위한 모터의 핀이 4개 이기 때문에 그 이상의 값으로 loop를 수행해도
      // 정상적인 범주로 값이 들어가야 하기 떄문에  (0,1,2,0,1,2 ... ) %4를 연산한 만큼 반복한다.
      setPhase(i % 4);
      // 'MotorSpeed' microSecod 만큼 신호를 유지한다
      delayMicroseconds(MotorSpeed);  // Pulse Hold Time
    }
  } else {
    for(int j = MotorStep; j >= 0; j--) {
      setPhase(j % 4);
      delayMicroseconds(MotorSpeed);  // Pulse Hold Time
    }
  }
}

/*************************************************************
 * 함수명 : void setPhase(unsigned char phase)
 * 인자값 : unsigned char phase  - 상이 미리 저장 되어 있는 
            배열을 사용하기 위한 인자 값
 * 설  명 : 테이블에 저장 된 상 값으로 펄스를 준다
 *************************************************************/
void setPhase(unsigned char phase) {
  // Pulse generation
  digitalWrite( A_IN2,  A_IN_table[phase]);
  digitalWrite( B_IN3,  B_IN_table[phase]);  
  digitalWrite(_A_IN1, _A_IN_table[phase]);      
  digitalWrite(_B_IN4, _B_IN_table[phase]);   
}
#+END_SRC

** Using Stepper Motor Library
#+BEGIN_SRC C -n
/*********************************************************
            [ STEP MOTOR 속성을 LCD에 출력하기 ]
  
      STEP MOTOR의 회전 방향을 시리얼 모니터에 출력
**********************************************************/
#include <Stepper.h>

// 시리얼을 사용하기 위해 임시로 핀을 바꿔준다
const int _A_IN1 = 11;        // Motor Pin A' Input 1 (Orange)
const int  A_IN2 = 10;        // Motor Pin A  Input 2 (Brown)
const int  B_IN3 = 9;         // Motor Pin B  Input 3 (RED)
const int _B_IN4 = 8;         // Motor Pin B' Input 4 (YELLOW)
const int ENABLE_PIN = 5;    // 활성핀
const int MOTOR_STEP = 200;  // 360' / 1.8'(모터의 스텝각)

// 스테퍼 클래스의 객체를 생성한다.
Stepper myStepper(MOTOR_STEP, _B_IN4,B_IN3,A_IN2,_A_IN1);   

// 스텝 모터의 속도 값
// 1~100 사이의 값으로 조절하며, 숫자가 높을수록 모터의 속도가 빨라진다.
int speedVal = 100;
// 스텝 모터의 스탭 값
// 50스탭은 90도 이다. (90'/1.8'(모터의 스탭각)) 
int stepVal = 200; // 360'

void setup() {
  // 시리얼 통신을 위해 통신 속도를 9600으로 설정한다.  
  Serial.begin(9600);
  Serial.println("---------------- Start Stepper ----------------");  
  pinMode(ENABLE_PIN,OUTPUT);      // Enable 핀을 출력으로 설정한다
  digitalWrite(ENABLE_PIN, HIGH);  // Enable 핀에 HIGH 신호를 준다
  myStepper.setSpeed(speedVal);    // 스텝 모터의 속도를 설정
}

void loop() {  
  // 매 loop가 반복 될 때 마다 스탭모터의 동작 방향이 바뀐다.
  // 스탭모터를 제어하는 Stepper.step 함수는 인자 값으로 - 값 부터 + 값을 받기 때문에 
  // -1 을 곱함으로써 방향의 변경이 가능하다  
  stepVal = (stepVal*-1);
  
   // 스탭 모터를 움직일 스탭수를 의미하는 변수 stepVal이 0보다 작을 시,
   // 즉 마이너스 값 일시 아래 구문을 동작 시킨다.
  if(stepVal < 0) {
    Serial.println("Stepper Motor Direction : CW ( ClockWise )");
    // step 함수의 인자로 얼마나 움직일지 스텝의 수치를 넣는다. (여기서는 200)    
    // -200 만큼 동작한다.    
    myStepper.step(stepVal);     
  } 
  // 스탭 모터를 움직일 스탭수를 의미하는 변수 stepVal이 0보다 클 시  
  else if(stepVal > 0) {
    Serial.println("Stepper Motor Direction : CCW ( Counter ClockWise )");
    // + 200 만큼 동작한다.    
    myStepper.step(stepVal);     
  }
  delay(1000);
}
#+END_SRC
