#+options: toc:nil ^:nil tags:t f:t
#+author: Sanglae Kim
#+title: 06. PIR, RF ID, Bluetooth, UART
#+subtitle: 06. PIR, RF ID, Bluetooth, UART 
#+description: 
#+beamer_theme: Berlin
#+beamer_font_theme: professionalfonts
#+setupfile:~/org-html-themes/setup/theme-bigblow.setup
#+HTML_HEAD_EXTRA: <style>pre {font-size:18px; font-family: 'consolas';}</style>
* 학습목표
  - 각종 모듈의 제어를 위한 함수들을 익힌다.
  - PIR 센서의 동작 원리를 이해하고, 제어 프로그램을 작성 할 수 있다.
  - RF ID의 동작 원리를 이해하고, 제어 프로그램을 작성 할 수 있다.
  - Bluetooth 모듈의 동작 및 원리를 이해하고, 제어 프로그램을 작성하여 스마트폰과 통신 할 수 있다.
  - UART 모듈의 동작 및 원리를 이해하고, 제어 프로그램을 작성하여 컴퓨터와 통신 할 수 있다.

* PIR(Pyroelectric passive infrared)
  
** 응용분야
   - 모션감지
   - 보안시스템
   - 자동 도어
   - 자동램프 제어
     
** 동작원리
   - 지구상이 모든 물체는 적외선(IR)에너지를 가지고 있다.
   - 어떤 물체의 IR 에너지는 다음과 같은 여러가지 파라미터에 따라 달라진다.
   - 1. 온도, 2. 색갈, 3. 텍스쳐
   - 이러한 에너지는 눈에 보이지 않지만 PIR 센터는 이를 탐지할 수 있다.
   - passive IR 센서는 active IR과 달리 ultrasound, 빛 또는 마이크로웨이브 에너지를 방출하지 않는다.

#+CAPTION: Figure 1: basic drawing of PIR sensor
#+NAME: fig:basic drawing of PIR sensor
#+ATTR_HTML: :width 800 :hight 600
   [[./images/pir1.jpg]]

** 세부 동작 원리
   - PIR 센서는 어떤 특정한 영역에 물체의 움직임을 감지하도록 설계됬다.
   - 다음 그림 2에서와 같이 이러한 센서들은 IR을 감지하는 두개의 센서를 가지고 있다.
   - 물체가 정해진 영역에서 움직이면, 두 센서에서 감지하는 IR의 양이 달다진다.
   - 이러한 차이를 증폭하여 물체의 움직임을 감지할 수 있다.
   - 그림에서 센서의 출력전압의 변화를 확인할 수 있다. 
#+CAPTION: Figure 2: 동작원리 of PIR sensor
#+NAME: fig:basic drawing of PIR sensor
#+ATTR_HTML: :width 800 :hight 600
   [[./images/pir2.jpg]]
** 영문 참조 문서
   [[file:doc/PIR_Intro_from_ST.pdf]]

** PIR 예제
   - [[https://www.arduino.cc/reference/en/language/functions/external-interrupts/attachinterrupt/][attatchInterrupt()]]
   - attatchInterrupt(digitalPinToInterrupt(pin), ISR, mode);

*** Example 1: PIR 기본
 #+BEGIN_SRC C -n
   /*
     +-------+-----+-----+-----+-----+------+------+-----+-----+
     |J2     |1    |2    |3    |4    |5     |6     |7    |8    |
     +-------+-----+-----+-----+-----+------+------+-----+-----+
     |Arduino|     |     |     |     |      |      |     |     |
     +-------+-----+-----+-----+-----+------+------+-----+-----+
   */

   const char pirPin = 2;
   const char ledPin = 13;
   char ledState = 0;
   volatile char toggleLed = 0;
   void setup(){
     Serial.begin(9600);
     pinMode(pirPin, INPUT);
     pinMode(ledPin, OUTPUT);
     attachInterrupt(digitalPinToInterrupt(pirPin), ledISR, RISING);
     digitalWrite(ledPin, HIGH);
   }
   void loop(){
     if(toggleLed){
       toggleLed = 0;
       Serial.println("Detected!!!");
       if(ledState == 1){
	 ledState = 0;
	 digitalWrite(ledPin, LOW);
      
       }else{
	 ledState = 1;
	 digitalWrite(ledPin, HIGH);
       }
     }
   }
   void ledISR(){toggleLed = 1;}
 #+END_SRC

*** Example 2: PIR & Stepper Motor 
 #+BEGIN_SRC C -n
   /*
     +-------+-----+-----+-----+-----+------+------+-----+-----+
     |J2     |1    |2    |3    |4    |5     |6     |7    |8    |
     +-------+-----+-----+-----+-----+------+------+-----+-----+
     |Arduino|     |     |     |     |      |      |     |     |
     +-------+-----+-----+-----+-----+------+------+-----+-----+
   */
 
   #include <Servo.h>
   Servo myServo;
   const char pirPin = 2;
   const char ledPin = 13;
   char ledState = 0;
   volatile char toggleLED = 0;

   void setup(){
     myServo.attach(7);
     Serial.begin(9600);
     pinMode(pirPin, INPUT);
     pinMode(ledPin, OUTPUT);
     attachInterrupt(digitalPinToInterrupt(pirPin), ledISR, RISING);
     digitalWrite(ledPin, HIGH);
   }

   void loop(){checkPir();}

   void ledISR(){toggleLED = 1;}
   void checkPir(){
     if(toggleLED){
       toggleLED = 0;
       Serial.println("Detected!!!");
       toggleLedFunc();
       onServo();
     }
   }
   void toggleLedFunc(){
     if(ledState == 1){
       ledState = 0;
       digitalWrite(ledPin, LOW);
     }else{
       ledState = 1;
       digitalWrite(ledPin, HIGH);
     }
   }
   void onServo(){
     myServo.write(180);
     delay(1000);
     myServo.write(0);
     delay(1000);
   }
 #+END_SRC

* Communication
** Bluetooth Communication
*** Bluetooth Module
#+ATTR_HTML: :width 800 :hight 600
   [[./images/bt_module.jpg]]
*** Android App
#+ATTR_HTML: :width 800 :hight 600
   [[./images/spp_pro.jpg]]
#+ATTR_HTML: :width 800 :hight 600
   [[./images/bluetooth_spp_pro.jpg]]
#+ATTR_HTML: :width 800 :hight 600
   [[./images/bluetooth_spp_pro1.jpg]]
#+ATTR_HTML: :width 800 :hight 600
   [[./images/bluetooth_spp_pro2.jpg]]
*** Android <-> bluetooth module <-> Arduino <-> Computer Example
#+BEGIN_SRC C -n
  /*
    +-------+-------+-------+-------+-------+-------+-------+-----+-----+
    |J3     |1/BTTXD|2/BTRXD|3/USTXD|4/USRXD|5/RSTXD|6/RSRXD|7    |8    |
    +-------+-------+-------+-------+-------+-------+-------+-----+-----+
    |Arduino|19/RX1 |18/TX1 |       |       |       |       |     |     |
    +-------+-------+-------+-------+-------+-------+-------+-----+-----+
  */
  boolean ledState = false;
  volatile boolean serialEventFlag = false;
  volatile boolean serialEventFlag1 = false;

  String rxString = "";
  String txString = "";

  void setup() {
    Serial.begin(9600);
    Serial1.begin(9600);
    pinMode(13, OUTPUT);
    rxString.reserve(200);
    txString.reserve(200);
    Serial.println("---- Starting the Program  -----");
  }
  void loop() {
    // Event from Android through Bluetooth
    if(serialEventFlag1){
      serialEventFlag1 = false;
      // doesn't work as I intended..Hmmmmm
      Serial.println(rxString.length());
      if(rxString == "off")
	digitalWrite(13, LOW);
      else if(rxString == "on")
	digitalWrite(13, HIGH);
      else if(rxString == "toggle")
	toggleLed();
      Serial.print(rxString);
      rxString = "";
    }
    // Event from PC through RS232
    if(serialEventFlag){
      serialEventFlag = false;
      Serial1.println(txString.length());
      Serial1.print(txString);
      txString = "";
    }
  }
  void toggleLed(){
    if(ledState){
      ledState = false;
      digitalWrite(13, HIGH);
    } else{
      ledState = true;
      digitalWrite(13, LOW);
    }
  }
  void serialEvent1() {
    //Bluetooth_RX_Count = 0;
    while(Serial1.available() > 0){
      delay(10);
      char inChar = (char)Serial1.read();
      if(inChar == '\n'){
	serialEventFlag1 = true;
	return;
      }
      rxString += inChar;
    }
  }
  void serialEvent(){
    while(Serial.available()){
      char inChar = (char)Serial.read();
      txString += inChar;
      if(inChar == '\n')
	serialEventFlag = true;
    }
  }
#+END_SRC
** UART Communication
