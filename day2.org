#+options: toc:nil ^:nil tags:t f:t
#+author: Sanglae Kim
#+title: 02. C언어 연습
#+subtitle: 아두이노 시작하기
#+description: 
#+beamer_theme: Berlin
#+beamer_font_theme: professionalfonts
#+setupfile:~/org-html-themes/setup/theme-bigblow.setup
#+HTML_HEAD_EXTRA: <style>pre {font-size:18px; font-family: 'consolas';}</style>

* 학습목표
  - 아두이노에서 사용하는 데이터의 유형이해
  - 각종 연산자 이해
  - 조건문 및 반복문 이해
  - 함수의 사용법 이해 및 작성
  - struct 및 class의 차이점 이해
* Arduino 기본 함수 요약 
** port functions
| 함수이름                    | 기능                             | 비고         |
|-----------------------------+----------------------------------+--------------|
| pinMode(pinNum, I/O)        | pinNum을 입력 또는 출력으로 설정 | INPUT/OUTPUT |
| digitalWrite(pinNum, value) | pinNum에 value를 쓴다            | HIGH/LOW     |
| digitalRead(pinNum)         | pinNum의 값을 읽는다.            |              |
|                             |                                  |              |

** communication
| 함수이름                      | 기능                                   | 비고              |
|-------------------------------+----------------------------------------+-------------------|
| Serial.begin(baud_rate)       | 전송속도를 baud_rate으로 설정          | 9600, 115200, ... |
| Serial.print("char_string")   | 문자열 출력                            |                   |
| Serial.println("char_string") | 문자열 출력후 다음줄로 개행            |                   |
| Serial.available()            |                                        |                   |
| Serial.parseInt()             | 시리얼모니터로 부터 정수를 입력받는다. |                   |


** Etc
   - delay(miliseconds)
     
* LED Basic
  
** 직접연결
 #+caption: LED01Direct
 #+attr_html: :alt neural network :title Neural network representation :align right
 #+attr_html: :width 100% :height 100%
     [[./images/led01Direct.jpg]]

** Source 회로
 #+caption: DLED02Source
 #+attr_html: :alt neural network :title Neural network representation :align right
 #+attr_html: :width 100% :height 100%
     [[./images/led02Source.jpg]]

** Sink 회로
 #+caption: DLED03Sink
 #+attr_html: :alt neural network :title Neural network representation :align right
 #+attr_html: :width 100% :height 100%
     [[./images/led03Sink.jpg]]

* 데이터 타입 및 연산자    
** 데이터 타입
   - C/C++는 다음과 같은 데이터 타입이 있으며,
   - 사용하고자 하는 목적에 따라 적절하게 선택하여야 한다.
   - uint8_t, uint16_t, uint32_t.
 #+caption: Data Types
 #+attr_html: :alt neural network :title Neural network representation :align right
 #+attr_html: :width 100% :height 100%
     [[./images/data_type.jpg]]
** 연산자
 #+caption: Operators
 #+attr_html: :alt neural network :title Neural network representation :align right
 #+attr_html: :width 100% :height 100%
     [[./images/operators.jpg]]

* 조건문 및 반복문
** 조건문
*** if(조건식), 조건식이 참이면 (즉, 0이 아니면) 다음 한 문장 또는 코드블럭을 실행.
#+caption: if
   #+BEGIN_SRC c++ -n
     if(3>4)
       Serial.println("3 is greater than 4");
      else
       Serial.println("3 is smaller than 4");
   #+END_SRC
#+caption: case
*** 위에서 부터 순차적으로 비교, 조건이 맞으면 실행, 그렇지 안으면 default 문실행
    - 열거형( enum ) : 코드를 보다 읽기 쉽게한다.
    - 새로운 사용자 타입지정(typedef) : uint32_t, char...과 같이 사용자가 원하는 새로운 변수 타입을 선언한다.
#+caption: case 예제
#+BEGIN_SRC c++ -n
  //                    0        1      2
  typedef enum _Fruits {BANANA, APPLE, PEACH} Fruits;
  Fruits theFruit;
  void setup() {Serial.begin(9600);}
  void loop() {
    Serial.println("Which fruit do you like?");
    Serial.println("0. Banana 1. Apple 2. Peach");
    while (Serial.available() == 0) {}
    theFruit = Serial.parseInt();
    Serial.print("Your answer is ");
    Serial.println(theFruit);
    switch (theFruit) {
      case BANANA:
	Serial.println("It's banana");
	break;
      case APPLE:
	Serial.println("It's apple");
	break;
      case PEACH:
	Serial.println("It's peach");
	break;
      default:
	Serial.println("O Oh!! Your got the wrong fruit.....");
	break;
    }
  } 
#+END_SRC
** 반복문
   - 조건문과 더불어 하나 이상의 코드를 반복실행 하고자 할 때사용
   - for 문이 가장 많이 사용됨
*** for(조건식)
    - 조건식이 참이면 다음 한문장 또는 코드블럭을 반복실행
#+caption: for 순서도
#+attr_html: :alt neural network :title Neural network representation :align right
#+attr_html: :width 100% :height 100%
    [[./images/for.jpg]]

#+caption: led_shield
#+attr_html: :alt neural network :title Neural network representation :align right
#+attr_html: :width 100% :height 100%
    [[./images/led_shield.jpg]]

#+caption: for 예제
#+BEGIN_SRC c++ -n
  /*   | Arduino    |   14 |   15 |   16 |   17 |
   *   |------------+------+------+------+------|
   *   | LED Shield | LED1 | LED2 | LED3 | LED4 |
   *
   *   | i       |  0 |  1 |  2 |  3 |
   *   |---------+----+----+----+----|
   *   | pLed[i] | 14 | 15 | 16 | 17 |
   */

  const char pLed[] = {14, 15, 16, 17};
  void setup(){ 
    for (uint32_t i=0; i<4; i++) 
      pinMode(pLed[i], OUTPUT );
  }
  void loop(){
    for (uint32_t i=0; i<4; ++i) 
      digitalWrite(pLed[i], HIGH);
    delay(500);
    for (uint32_t i=0; i<4; ++i) 
      digitalWrite(pLed[i], LOW);
    delay(500);
  }
#+END_SRC
*** while(조건식)
    - 조건식이 참이면 다음 한문장 또는 코드블럭을 반복실행
#+caption: while
#+attr_html: :alt neural network :title Neural network representation :align right
#+attr_html: :width 100% :height 100%
    [[./images/while.jpg]]

#+caption: keypad_shield
#+attr_html: :alt neural network :title Neural network representation :align right
#+attr_html: :width 100% :height 100%
    [[./images/keypad_shield.jpg]]

#+caption: while example source
#+BEGIN_SRC c++ -n
  /*   
   *   | Arduino    |   12 |   14 |   15 |   16 |   17 |
   *   |------------+------+------+------+------+------|
   *   | DIP Switch | DIP1 |      |      |      |      |
   *   | LED Shield |      | LED1 | LED2 | LED3 | LED4 |
   *
   *   | i       |  0 |  1 |  2 |  3 |
   *   |---------+----+----+----+----|
   *   | pLed[i] | 14 | 15 | 16 | 17 |
   */

  const char pLed[] = {14, 15, 16, 17};
  const char pDip = 12;   // <- 추가
  void setup(){ 
    pinMode(pDip, INPUT); // <- 추가 
    for (uint32_t i=0; i<4; i++) 
      pinMode(pLed[i], OUTPUT );
  }
  void loop(){
    while(digitalRead(pDip)){} // <- 추가
    for (uint32_t i=0; i<4; ++i) 
      digitalWrite(pLed[i], HIGH);
    delay(500);
    for (uint32_t i=0; i<4; ++i) 
      digitalWrite(pLed[i], LOW);
    delay(500);
  }
#+END_SRC

*** do while(조건식)
    - 조건식이 참이면 다음 한문장 또는 코드블럭을 반복실행
    - 1회 이상 반복 실행
#+caption: do while
#+attr_html: :alt neural network :title Neural network representation :align right
#+attr_html: :width 100% :height 100%
    [[./images/do_while.jpg]]

* 함수 작성 및 사용
  - C 언어에서는 함수 호출전에 함수의 선언(declaration)이나 정의(definition)가 있어야 하나,
  - 아두이노에서는 그러하지 않다.
** 함수의 선언(declaration)
#+BEGIN_SRC c++ -n
//반환형 함수이름(인자){몸통}
  uint32_t addInt(uint32_t, uint32_t);
#+END_SRC
** 함수정의(definition)
  #+BEGIN_SRC c++ -n
    uint32_t addInt(uint32_t x, uint32_t y){
      return x+y;
    }
  #+END_SRC
** 함수의 사용
#+BEGIN_SRC c++ -n
  uint32_t a=3, b=4, z;
  z = addInt(a,b);
#+END_SRC
** 예제
#+caption: function, while && for example source
#+BEGIN_SRC c++ -n
  uint32_t sumToN(uint32_t n){
    uint32_t temp=0;
    for (uint32_t i=n; i>0; i--) 
      temp += i;
    return temp;
  }
  void setup(){Serial.begin(9600);}
  void loop(){
    uint32_t n;
    Serial.println("Enter a number to sum up to!!");
    while (Serial.available() == 0) {}
    n = Serial.parseInt();
    Serial.print("The Sum from 0 up to ");
    Serial.print(n);
    Serial.print(" is ");
    Serial.println(sumToN(n));
  }
#+END_SRC
** ASCII Table
   - https://en.wikipedia.org/wiki/ASCII
 #+caption: Data Types
 #+attr_html: :alt neural network :title Neural network representation :align right
 #+attr_html: :width 100% :height 100%
     [[./images/ascii.jpg]]
* struct 및 class
** struct
   - 데이터와 이를 처리하는 함수가 분리
#+BEGIN_SRC c++ -n
  typedef struct _Cpx{int32_t r, i;}Cpx;
  Cpx addCpx(Cpx c1, Cpx c2){
    Cpx temp;
    temp.r = c1.r + c2.r;
    temp.i = c1.i + c2.i;
    return temp;
  }
  void setup(){Serial.begin(9600);}
  void loop(){
    Cpx c1={3,4}, c2={5,6}, c3;
    c3 = addCpx(c1,c2);
    Serial.print("c3"); Serial.print("("); Serial.print(c3.r); 
    Serial.print(","); Serial.print(c3.i); Serial.print(")");
    while(1){}
  }
#+END_SRC

** class
   - 데이터와 이를 처리하는 함수가 하나의 클래스내에 존재
#+BEGIN_SRC c++ -n
class Cpx{
public:
  int32_t r, i;
  Cpx(int32_t r_, int32_t i_):r(r_), i(i_){}
  Cpx():r(0), i(0){}
  Cpx(const Cpx &c):r(c.r),i(c.i){}
  void add(Cpx c){
    r = r+ c.r;
    i = i+ c.i;
  }
  const Cpx& operator=(const Cpx& c){
    r = c.r;
    i = c.i;
    return *this;
  }
  Cpx operator+(Cpx c){
    Cpx temp;
    temp.r = r+c.r;
    temp.i = i+c.i;
    return temp;
  }
};
void setup(){Serial.begin(9600);}
void loop(){
  Cpx c1(3,4), c2(2,3), c3;
  c3 = c1+c2;
  c1.add(c2);
  Serial.print("c1"); Serial.print("("); Serial.print(c1.r); 
  Serial.print(","); Serial.print(c1.i); Serial.println(")");
  Serial.print("c3"); Serial.print("("); Serial.print(c3.r); 
  Serial.print(","); Serial.print(c3.i); Serial.print(")");
  while(1){}
}
#+END_SRC
* Class Summary
** C/C++ Basic
   
#+BEGIN_SRC c++ -n
  const pLed[] = {14, 15, 16, 17};
  typedef enum _Fruit{BANANA, APPLE, PEACH} Fruits;
  typedef struct _Cpx{int r, i} Cpx;
  const uint8_t pNums[] = {13, 14, 15, 16};
  typedef struct _Cpx{int r,i}Cpx;
  if() else
  while(){}
  for(;;){}
  int addInt(int a, int b);
#+END_SRC
     
** 단축키

| 단축키    | 기능                   | 비고                          |
|-----------+------------------------+-------------------------------|
| C-r       | 컴파일                 | 확인                          |
| C-u       | 업로드                 |                               |
| C-shift-m | 시리얼모니터           | USB케이블이 연결돼 있어야 함. |
| C-t       | 문서전체 자동 들여쓰기 |                               |
| C-/       | 선택영역 주석 / 해제   |                               |
|           |                        |                               |



